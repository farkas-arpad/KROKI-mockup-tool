# Generated by KROKI
# http://www.kroki-mde.net/

#default imports
from django import forms
from django.forms.widgets import TextInput, Textarea, Select, DateInput, NumberInput, CheckboxInput
from django.utils import timezone
from django.utils.translation import ugettext_lazy as _

#generated imports
from ${modulename}.models import Login<#list models as model>, ${model.name}</#list><#list enumerations as enum>, ${enum.name}</#list>

# Default Login form
class LoginForm(forms.ModelForm):
	class Meta:
		model = Login
		fields = ['username', 'password']
    
	def clean_password(self):
		password = self.cleaned_data.get('password')
    
	def clean_username(self):
		username = self.cleaned_data.get('username')

<#list models as model>
class ${model.name}Form(forms.ModelForm):
	class Meta:
		model = ${model.name}
		fields =[
			<#list model.fieldsList as field>
			<#if field.hidden == false>
			'${field.fieldName}'<#if field_has_next == true>,</#if>
			</#if>
			</#list>
		]
		
		widgets = {
		<#list model.fieldsList as field>
		<#if field.enumerationName??>
			'${field.fieldName}' : Select(attrs={'class':'form-control'}, choices=${field.enumerationName}),  			
		<#elseif field.entryTypesEnum == 'CharField'>
			'${field.fieldName}' : TextInput(attrs={'class':'form-control'}),
		<#elseif field.entryTypesEnum == 'IntegerField'>
			'${field.fieldName}' : NumberInput(attrs={'class':'form-control'}),
		<#elseif field.entryTypesEnum == 'DateField'>
		<#elseif field.entryTypesEnum == 'Textarea'>
			'${field.fieldName}' : Textarea(attrs={'class':'form-control', 'rows' : '3'}),
		<#elseif field.entryTypesEnum == 'BooleanField'>
			'${field.fieldName}' : CheckboxInput(attrs={'class':'form-control'}),
		<#elseif field.entryTypesEnum == 'ForeignKey' && classnameModelMap[field.className]??>
			'${field.fieldName}' : Select(attrs={'class':'form-control'}, choices=${classnameModelMap[field.className]}.objects.all()),
		</#if>
		</#list>
		}
		
		labels = {
			<#list model.fieldsList as field>
			<#if field.hidden == false>
			"${field.fieldName}" : _("${field.label}")<#if field_has_next == true>,</#if>
			</#if>
			</#list>
		}

class ${model.name}FormReadOnly(forms.ModelForm):
	class Meta:
		model = ${model.name}
		fields =[
			<#list model.fieldsList as field>
			<#if field.hidden == false>
			'${field.fieldName}'<#if field_has_next == true>,</#if>
			</#if>
			</#list>
		]
		
		widgets = {
		<#list model.fieldsList as field>
		<#if field.enumerationName??>
			'${field.fieldName}' : Select(attrs={'class':'form-control', 'disabled':'disabled'}, choices=${field.enumerationName}),  			
		<#elseif field.entryTypesEnum == 'CharField'>
			'${field.fieldName}' : TextInput(attrs={'class':'form-control', 'disabled':'disabled'}),
		<#elseif field.entryTypesEnum == 'IntegerField'>
			'${field.fieldName}' : NumberInput(attrs={'class':'form-control','disabled':'disabled'}),
		<#elseif field.entryTypesEnum == 'DateField'>
		<#elseif field.entryTypesEnum == 'Textarea'>
			'${field.fieldName}' : Textarea(attrs={'class':'form-control', 'rows' : '3', 'disabled':'disabled'}),
		<#elseif field.entryTypesEnum == 'BooleanField'>
			'${field.fieldName}' : CheckboxInput(attrs={'class':'form-control', 'disabled':'disabled'}),
		<#elseif field.entryTypesEnum == 'ForeignKey' && classnameModelMap[field.className]??>
			'${field.fieldName}' : Select(attrs={'class':'form-control', 'disabled':'disabled'}, choices=${classnameModelMap[field.className]}.objects.all()),
		</#if>
		</#list>
		}

		labels = {
			<#list model.fieldsList as field>
			<#if field.hidden == false>
			"${field.fieldName}" : _("${field.label}")<#if field_has_next == true>,</#if>
			</#if>
			</#list>
		}
</#list>

<#list panels as panel>
<#if panel.standardOperations.operations?has_content >   
<#list panel.standardOperations.operations as operation>
class ${panel.name}_${operation.name}Form(forms.Form):
	# set transaction parameters here
	param1 = forms.CharField(required=False)
</#list>   
</#if>
</#list>

    