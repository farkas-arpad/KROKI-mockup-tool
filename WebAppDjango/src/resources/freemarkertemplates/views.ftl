
# Generated by KROKI
# http://www.kroki-mde.net/

from django.core.urlresolvers import reverse
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response, render, redirect
from django.template import RequestContext

#generated imports
from ${modulename}.models import <#list models as model> ${model.name}<#if model_has_next == true>,</#if></#list>
from ${modulename}.forms import LoginForm<#list models as model>, ${model.name}Form, ${model.name}FormReadOnly</#list>

# homepage view
@login_required(login_url='login/')
def index(request):
	context = {
		"projectname": "${projectname}",
	}
	return render(request,'home.html', context)

# logout function	
def logout_user(request):
	form = LoginForm()
	context = {
		"projectname": "${projectname}",
		"description": "${description}", 	
		"title": 'Login',
		"form" : form
    }
    
	logout(request)
	return render(request,'login.html', context)     
 
# test link for sanity checks            
def testdefault(request):
	return HttpResponse("Hello, world. You're at the test view.")
	
# login function
def login_user(request):   
	form = LoginForm()
	context = {
		"projectname": "${projectname}",
		"description": "${description}",  	
		"title": 'Login',
		"form" : form
    }
	username = password = ''
	if request.POST:
		username = request.POST['username']
		password = request.POST['password']

		user = authenticate(username=username, password=password)
		if user is not None:
			if user.is_active:
				login(request, user)
				return HttpResponseRedirect(reverse('index'))
	return render(request,'login.html', context)

<#list panels as panel>
@login_required(login_url='login/')
def ${panel.name}_list(request): # panel_id
    context = RequestContext(request)
    ${panel.name}s = ${panel.entityBean.name}.objects.all()    # modelname.objects.all()
    return render_to_response('${panel.name}_list.html',{'deletable' : "true", "${panel.name}s" : ${panel.name}s,"projectname" : "${projectname}"},context)

def ${panel.name}(request, ${panel.name}_id):
	context = RequestContext(request)
	${panel.name}_form = ${panel.entityBean.name}FormReadOnly(instance=${panel.entityBean.name}.objects.get(pk=${panel.name}_id))	
	
	<#list panel.entityBean.attributes as attribute>
	<#if attribute.lookupClass??>
	# list of foreign keys
	${attribute.name}s = ${classnameModelMap[attribute.lookupClass]}.objects.all()
	</#if>
	</#list>
	return render_to_response('${panel.name}.html',{'${panel.entityBean.name}Form':  ${panel.name}_form, '${panel.name}_id': ${panel.name}_id, 'editable' : 'true', "projectname" : "${projectname}"<#list panel.entityBean.attributes as attribute><#if attribute.lookupClass??>, '${attribute.name}s' : ${attribute.name}s</#if></#list>}, context)

# render empty form 	
# if new object added redirect to listing
# if there is an error message display
@login_required(login_url='login/')
def ${panel.name}_new(request):

	context = RequestContext(request)
	if request.method == 'POST':
		${panel.name}_form = ${panel.entityBean.name}Form(data=request.POST)
		if ${panel.name}_form.is_valid():
			${panel.name} = ${panel.name}_form.save()
			${panel.name}.save()
			return redirect('${panel.name}_list')
		# previous workflow:	
		#	return render_to_response('${panel.name}_list.html',{"${panel.entityBean.name}Form" : ${panel.name}_form, "projectname" : "${projectname}"},context)    
		else: 
			messages.error(request, ${panel.name}_form.errors)
	else:
		${panel.name}_form = ${panel.entityBean.name}Form()
		<#list panel.entityBean.attributes as attribute>
		<#if attribute.lookupClass??>
		# list of foreign keys
		${attribute.name}s = ${classnameModelMap[attribute.lookupClass]}.objects.all()
		</#if>
		</#list>
	return render_to_response('${panel.name}_new.html', {'${panel.entityBean.name}Form': ${panel.name}_form, "projectname" : "${projectname}"<#list panel.entityBean.attributes as attribute><#if attribute.lookupClass??>, '${attribute.name}s' : ${attribute.name}s</#if></#list>}, context)

@login_required(login_url='login/')    
def ${panel.name}_edit(request, ${panel.name}_id):
	context = RequestContext(request)
	${panel.name}FromDB = ${panel.entityBean.name}.objects.get(pk=${panel.name}_id)
	if request.method == 'POST':
		${panel.name}_form = ${panel.entityBean.name}Form(request.POST, instance=${panel.name}FromDB)
		if ${panel.name}_form.is_valid():
			${panel.name} = ${panel.name}_form.save()
			${panel.name}.save()
			
			<#list panel.entityBean.attributes as attribute>
			<#if attribute.lookupClass??>
			# list of foreign keys
			${attribute.name}s = ${classnameModelMap[attribute.lookupClass]}.objects.all()
			</#if>
			</#list> 
			${panel.name}_form = ${panel.entityBean.name}FormReadOnly(instance=${panel.name}FromDB)	         
			return render_to_response('${panel.name}.html', {'${panel.entityBean.name}Form': ${panel.name}_form,'${panel.name}_id': ${panel.name}_id, 'editable' : 'true', "projectname" : "${projectname}"<#list panel.entityBean.attributes as attribute><#if attribute.lookupClass??>,'${attribute.name}s' : ${attribute.name}s</#if></#list>},context)
		else: 
			messages.error(request, ${panel.name}_form.errors)
			
	${panel.name}_form = ${panel.entityBean.name}Form(instance=${panel.name}FromDB)
	return render_to_response('${panel.name}_new.html', {'${panel.entityBean.name}Form': ${panel.name}_form,'${panel.name}_id': ${panel.name}_id, "projectname" : "${projectname}",}, context)

@login_required(login_url='login/')    
def ${panel.name}_delete(request, ${panel.name}_id):
	context = RequestContext(request)
	${panel.name} = ${panel.entityBean.name}.objects.get(pk=${panel.name}_id)
	if request.method == 'POST':
		${panel.name}.delete();
        
	${panel.name}s = ${panel.entityBean.name}.objects.all()    
	return render_to_response('${panel.name}_list.html',{'deletable' : "true", "${panel.name}s" : ${panel.name}s, "projectname": "${projectname}"},context)
 
</#list>

   

	